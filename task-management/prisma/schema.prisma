generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId], map: "accounts_userId_fkey")
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId], map: "sessions_userId_fkey")
    @@map("sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?   @default("/default-avatar.jpg")
    accounts      Account[]
    sessions      Session[]

    roles        RoleUser[]
    tasks        TaskUser[]
    createdTasks Task[]

    @@map("users")
}

model Role {
    id   Int    @id @default(autoincrement())
    name String

    permissions PermissionRole[]
    users       RoleUser[]

    @@map("roles")
}

model Permission {
    id    Int              @id @default(autoincrement())
    name  String
    roles PermissionRole[]

    @@map("permissions")
}

model Task {
    id          Int      @id @default(autoincrement())
    name        String
    description String
    user_id     String
    created_at  DateTime @default(now())
    updated_at  DateTime @default(now())

    users TaskUser[]

    createdBy User @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@index([user_id], map: "tasks_user_id_fkey")
    @@map("tasks")
}

model RoleUser {
    id      Int    @id @default(autoincrement())
    role_id Int
    user_id String

    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
    role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)

    @@index([user_id, role_id], map: "role_user_user_id_fkey")
    @@map("role_user")
}

model PermissionRole {
    id Int @id @default(autoincrement())

    permission_id Int
    role_id       Int

    permission Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
    role       Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)

    @@index([role_id, permission_id], map: "permission_role_role_id_fkey")
    @@map("permission_role")
}

model TaskUser {
    id      Int    @id @default(autoincrement())
    task_id Int
    user_id String

    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
    role Task @relation(fields: [task_id], references: [id], onDelete: Cascade)

    @@index([user_id, task_id], map: "task_user_user_id_fkey")
    @@map("task_user")
}

// model TaskPriority {
//     task_user_id Int

//     user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
//     role Task @relation(fields: [task_id], references: [id], onDelete: Cascade)

//     @@id([task_id, user_id])
//     @@index([user_id], map: "task_user_user_id_fkey")
//     @@map("task_priorities")
// }

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}
